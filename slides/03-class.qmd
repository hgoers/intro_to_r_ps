---
title: "GVPT Maths Boot Camp"
subtitle: "Data Transformation"
format: 
  revealjs:
    slide-number: true
    preview-links: auto
    theme: solarized
    embed-resources: true
---

## Learning objectives

1.    Learn basic operations using R

2.    Be introduced to `dplyr`

3.    Clean up and transform your data

## R as a calculator

<br>

```{r}
#| echo: true

1 / 200 * 30
```

<br>

```{r}
#| echo: true

(59 + 73 + 2) / 3
```

<br>

```{r}
#| echo: true

sin(pi / 2)
```

## R objects

Create new objects with `<-`

```{r}
#| echo: true

x <- 3 * 4

x
```

<br>

```{r}
#| echo: true

x <- 3 * 10

x
```


## R functions

Many functions come with R straight out of the box:

```{r}
#| echo: true

seq(1, 10)
```

<br>

You can create objects using functions: 

```{r}
#| echo: true

x <- seq(1, 10)

x
```

## Introduction to data transformation

> TO DO: Add video link

## Accessing gapminder data

First, you need to install the `gapminder` package:

```{r}
#| eval: false
#| echo: true

install.packages("gapminder")
```

Then access the `gapminder` data set:

```{r}
#| echo: true

library(gapminder)

head(gapminder)
```

## Data types

In `gapminder`:

-   `fctr` stands for factors, which R uses to represent categorical variables with fixed possible values.

-   `int` stands for integer.

-   `dbl` stands for doubles (or real numbers).

## Data types

Other types: 

-   `chr` stands for character vectors, or strings.

-   `dttm` stands for date-times (a date + a time).

-   `lgl` stands for logical, vectors that contain only `TRUE` or `FALSE`.^[`TRUE` can be shortened to `T` and `FALSE` can be shortened to `F`.]

## Introducing `dplyr`

*Help you with most of your data transformation needs.*

Five basic functions: 

-   `filter()`

-   `arrange()`

-   `select()`

-   `mutate()`

-   `summarise()`

## Filter rows with `filter()`

```{r}
#| echo: true

library(dplyr)

filter(gapminder, country == "Australia", year > 2000)
```

## Filter rows with `filter()`

```{r}
#| echo: true

library(dplyr)

filter(gapminder, continent %in% c("Asia", "Oceania"))
```

## Filter rows with `filter()`

```{r}
#| echo: true

library(dplyr)

filter(gapminder, pop > 500000 & pop < 1000000)
```

## Filter rows with `filter()`

```{r}
#| echo: true

library(dplyr)

filter(gapminder, pop > 500000 | pop < 1000000)
```

## Arrange rows with `arrange()`

```{r}
#| echo: true

library(dplyr)

arrange(gapminder, country, year)
```

## Arrange rows with `arrange()`

```{r}
#| echo: true

library(dplyr)

arrange(gapminder, country, desc(year))
```

## Select columns with `select()`

```{r}
#| echo: true

library(dplyr)

select(gapminder, country, year, pop)
```

## Select columns with `select()`

```{r}
#| echo: true

library(dplyr)

select(gapminder, country:pop)
```

## Select columns with `select()`

```{r}
#| echo: true

library(dplyr)

select(gapminder, -(lifeExp:pop))
```

## Add new variables with `mutate()`

```{r}
#| echo: true

library(dplyr)

mutate(gapminder, gdp = gdpPercap * pop)
```

## Select, transform, and add new variables with `transmute()`

```{r}
#| echo: true

library(dplyr)

transmute(gapminder, country, year, gdp = gdpPercap * pop)
```

## Create summaries with `summarise()`

```{r}
#| echo: true

library(dplyr)

summarise(gapminder, avg_pop = mean(pop), avg_gdp_per_cap = mean(gdpPercap))
```

## Creating grouped summaries with `group_by()` and `summarise()`

```{r}
#| echo: true

library(dplyr)

gapminder_continent <- group_by(gapminder, continent)

summarise(gapminder_continent, avg_pop = mean(pop), avg_gdp_per_cap = mean(gdpPercap))
```

## Combine multiple operations with the pipe

```{r}
#| echo: true

library(dplyr)

gapminder |> 
  group_by(continent) |> 
  summarise(avg_pop = mean(pop), avg_gdp_per_cap = mean(gdpPercap)) |> 
  arrange(avg_gdp_per_cap)
```

## Combine multiple operations with the pipe

```{r}
#| echo: true
#| fig-align: center

library(dplyr)
library(ggplot2)

gapminder |> 
  group_by(continent) |> 
  summarise(avg_pop = mean(pop), avg_gdp_per_cap = mean(gdpPercap)) |> 
  ggplot(aes(x = continent, y = avg_gdp_per_cap)) + 
  geom_col() + 
  theme_minimal()
```

## A note on the pipe

:::: {.columns}

::: {.column width="50%"}
Base pipe:

-   ` |> `

-   Can be used without loading any packages
:::

::: {.column width="50%"}
Tidyverse pipe:

-   `%>%`

-   Must load `dplyr` or `magrittr` to use
:::

::::

## A handy shortcut for counting data with `count()`

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true

library(dplyr)

gapminder |> 
  distinct(continent, country) |> 
  group_by(continent) |> 
  summarise(n_countries = n())
```

:::

::: {.column width="50%"}
```{r}
#| echo: true

library(dplyr)

gapminder |> 
  distinct(continent, country) |> 
  count(continent)
```
:::

::::

## Summary

This morning you have: 

1.    Learnt R basic syntax

2.    Learnt how to transform your data
