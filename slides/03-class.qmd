---
title: "GVPT Maths Camp"
subtitle: "Data Transformation"
format: 
  revealjs:
    slide-number: true
    preview-links: auto
    theme: solarized
    embed-resources: true
execute: 
  echo: true
---

## Learning objectives

1.  Learn basic operations in R

2.  Be introduced to `dplyr`

3.  Clean up and transform your data

## R objects

Create new objects with `<-`

```{r}
x <- 3 * 4

x
```

<br>

```{r}
x <- 3 * 10

x
```

::: aside
Some people use `=` instead of `<-`. I strongly recommend against this. It makes your script difficult to read, and it can lead to syntax errors.
:::

## R functions

Many functions come with R straight out of the box:

```{r}
seq(1, 10)
```

<br>

You can create objects using functions:

```{r}
x <- seq(1, 10)

x
```

## Introduction to data transformation

{{< video https://www.youtube.com/embed/jbkSRLYSojo width="100%" height="85%" >}}

## EXERCISE {background-color="#B56576"}

First, you need to install the `gapminder` package:

```{r}
#| eval: false

install.packages("gapminder")
```

Then access the `gapminder` data set:

```{r}
library(tidyverse)
library(gapminder)

head(gapminder)
```

## Data types

In `gapminder`:

-   `fctr` stands for factors, which R uses to represent categorical variables with fixed possible values.

-   `int` stands for integer.

-   `dbl` stands for doubles (or real numbers).

## Data types

Other types:

-   `chr` stands for character vectors, or strings.

-   `dttm` stands for date-times (a date + a time).

-   `lgl` stands for logical, vectors that contain only `TRUE` or `FALSE`.[^1]

[^1]: `TRUE` can be shortened to `T` and `FALSE` can be shortened to `F`.

## Introducing `dplyr`

*Help you with most of your data transformation needs.*

Five basic functions:

-   `filter()`

-   `arrange()`

-   `select()`

-   `mutate()`

-   `summarise()`

## Filter rows with `filter()`

```{r}
filter(gapminder, country == "Australia", year > 2000)
```

## Filter rows with `filter()`

```{r}
filter(gapminder, continent %in% c("Asia", "Oceania"))
```

## Filter rows with `filter()`

```{r}
filter(gapminder, pop > 500000 & pop < 1000000)
```

## Filter rows with `filter()`

```{r}
filter(gapminder, pop > 500000 | pop < 1000000)
```

## EXERCISE {background-color="#B56576"}

1.  Find all country-years that have populations greater than 1 billion people.

2.  Find all countries in Oceania.

> HINT: Check out `distinct()`.

3.  Find all countries in both Asia and Europe.

4.  Find all country-years that have a life expectancy greater than 50 years *and* less than 60 years.

5.  Find all country-years that have a life expectancy less than 50 years *or* greater than 60 years.

## CHECK YOUR ANSWERS {background-color="#B56576"}

1.  Find all country-years that have populations greater than 1 billion people.

```{r}
filter(gapminder, pop > 1e9)
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

2.  Find all countries in Oceania.

```{r}
distinct(filter(gapminder, continent == "Oceania"), country)
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

3.  Find all countries in both Asia and Europe.

```{r}
distinct(filter(gapminder, continent %in% c("Asia", "Europe")), country)
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

4.  Find all country-years that have a life expectancy greater than 50 years *and* less than 60 years.

```{r}
filter(gapminder, lifeExp > 50 & lifeExp < 60)
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

5.  Find all country-years that have a life expectancy less than 50 years *or* greater than 60 years.

```{r}
filter(gapminder, lifeExp < 50 | lifeExp > 60)
```

## Handy operations

`==` is *equal to*

<br>

`=!` is *not equal to*

<br>

`>=` is *greater than or equal to*

<br>

`<=` is *less than or equal to*

## Handy operations

<br>

`|` is *OR*

<br>

`&` is *AND*

<br>

`%in%` is *in*

## Arrange rows with `arrange()`

```{r}
arrange(gapminder, country, year)
```

## Arrange rows with `arrange()`

```{r}
arrange(gapminder, country, desc(year))
```

## EXERCISE {background-color="#B56576"}

1.  Which country-year has the lowest life expectancy?

2.  Which country-year has the largest population?

## CHECK YOUR ANSWERS {background-color="#B56576"}

1.  Which country-year has the lowest life expectancy?

```{r}
arrange(gapminder, lifeExp)
```

::: aside
Check out `slice_min()` and `slice_max()` for more efficient ways of doing this.
:::

## CHECK YOUR ANSWERS {background-color="#B56576"}

2.  Which country-year has the largest population?

```{r}
arrange(gapminder, desc(pop))
```

::: aside
Check out `slice_min()` and `slice_max()` for more efficient ways of doing this.
:::

## Select columns with `select()`

```{r}
select(gapminder, country, year, pop)
```

## Select columns with `select()`

```{r}
select(gapminder, country:pop)
```

## Select columns with `select()`

```{r}
select(gapminder, -(lifeExp:pop))
```

## EXERCISE {background-color="#B56576"}

1.  Select only the `country`, `year`, and `lifeExp` variables from `gapminder`.

2.  What does the `any_of()` function do? Why might it be helpful in conjunction with this vector?

```{r}
vars <- c("country", "year", "lifeExp")
```

3.  What does the following code produce?

```{r}
#| eval: false

select(gapminder, starts_with("c"))
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

1.  Select only the `country`, `year`, and `lifeExp` variables from `gapminder`.

```{r}
select(gapminder, country, year, lifeExp)
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

2.  What does the `any_of()` function do? Why might it be helpful in conjunction with this vector?

```{r}
vars <- c("country", "year", "lifeExp")

select(gapminder, any_of(vars))
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

3.  What does the following code produce?

```{r}
select(gapminder, starts_with("c"))
```

## Add new variables with `mutate()`

```{r}
mutate(gapminder, gdp = gdpPercap * pop)
```

## Select, transform, and add new variables with `transmute()`

```{r}
transmute(gapminder, country, year, gdp = gdpPercap * pop)
```

## Create summaries with `summarise()`

```{r}
summarise(
  gapminder, avg_pop = mean(pop), avg_gdp_per_cap = mean(gdpPercap)
)
```

## Creating grouped summaries with `group_by()` and `summarise()`

```{r}
gapminder_continent <- group_by(gapminder, continent)

summarise(
  gapminder_continent, avg_pop = mean(pop), avg_gdp_per_cap = mean(gdpPercap)
)
```

## EXERCISE {background-color="#B56576"}

1.  Calculate each country-year's GDP.

2.  Find each country's average GDP across all years in the `gapminder` data set.

3.  Find the country with the smallest average GDP across these years.

4.  Find the country with the largest average GDP across these years.

## CHECK YOUR ANSWERS {background-color="#B56576"}

1.  Calculate each country-year's GDP.

```{r}
mutate(gapminder, gdp = pop * gdpPercap)
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

2.  Find each country's average GDP across all years in the `gapminder` data set.

```{r}
gapminder_country <- group_by(gapminder, country)

gapminder_country_avg <- summarise(
  mutate(gapminder_country, gdp = pop * gdpPercap), avg_gdp = mean(gdp)
)

head(gapminder_country_avg)
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

3.  Find the country with the smallest average GDP across these years.

```{r}
arrange(gapminder_country_avg, avg_gdp)
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

4.  Find the country with the largest average GDP across these years.

```{r}
arrange(gapminder_country_avg, desc(avg_gdp))
```

## Combine multiple operations with the pipe

That got messy!

-   We had a lot of different objects representing intermediate steps in our calculations.

-   We never need those objects again. Can we avoid creating them?

Let's introduce perhaps the defining feature of the tidyverse: **the pipe**.

## Combine multiple operations with the pipe

Read the pipe as:

Take this \|\> (*and then...*) <br>     do this \|\> (*and then...*) <br>     do this

```{r}
gapminder |> 
  group_by(continent) |> 
  summarise(avg_pop = mean(pop), avg_gdp_per_cap = mean(gdpPercap)) |> 
  arrange(avg_gdp_per_cap)
```

## Combine multiple operations with the pipe

```{r}
gapminder |> 
  group_by(continent) |> 
  summarise(avg_pop = mean(pop), avg_gdp_per_cap = mean(gdpPercap)) |> 
  ggplot(aes(x = continent, y = avg_gdp_per_cap)) + 
  geom_col() + 
  theme_minimal()
```

## A note on the pipe

::: columns
::: {.column width="50%"}
Base pipe:

-   `|>`

-   Can be used without loading any packages

-   Relatively new: introduced in 2021
:::

::: {.column width="50%"}
Tidyverse pipe:

-   `%>%`

-   Must load `dplyr` or `magrittr` to use
:::
:::

## EXERCISE {background-color="#B56576"}

1.    Calculate the average GDP per capita for countries in the Americas in 2007. Display only the country and average GDP per capita variables. 

2.    Plot your results. 

## CHECK YOUR ANSWERS {background-color="#B56576"}

1.    Calculate the average GDP per capita for countries in the Americas in all years including or after 2000. 

```{r}
gapminder_americas_2000 <- gapminder |> 
  filter(continent == "Americas", year >= 2000) |> 
  group_by(country) |> 
  summarise(avg_gdp_per_cap = mean(gdpPercap))

gapminder_americas_2000
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

2.    Plot your results. 

```{r}
#| echo: false

ggplot(gapminder_americas_2000, aes(x = avg_gdp_per_cap, y = reorder(country, avg_gdp_per_cap))) + 
  geom_col() +
  theme_minimal() + 
  labs(title = "Average GDP per capita for countries in the Americas in 2002 and 2007",
       x = "Average GDP per capita (US$)",
       y = NULL) + 
  scale_x_continuous(labels = scales::label_dollar())
```

## CHECK YOUR ANSWERS {background-color="#B56576"}

2.    Plot your results. 

```{r}
#| eval: false

ggplot(
  gapminder_americas_2000, 
  aes(x = avg_gdp_per_cap, y = reorder(country, avg_gdp_per_cap))
) + 
  geom_col() +
  theme_minimal() + 
  labs(title = "Average GDP per capita for countries in the Americas in 2002 and 2007",
       x = "Average GDP per capita (US$)",
       y = NULL) + 
  scale_x_continuous(labels = scales::label_dollar())
```

::: aside
Check out the `scales` R package for very handy formatting functions: [https://scales.r-lib.org](https://scales.r-lib.org/index.html)
:::

## A handy shortcut for counting data with `count()`

::: columns
::: {.column width="50%"}
```{r}
gapminder |> 
  distinct(continent, country) |> 
  group_by(continent) |> 
  summarise(n_countries = n())
```
:::

::: {.column width="50%"}
```{r}
gapminder |> 
  distinct(continent, country) |> 
  count(continent)
```
:::
:::

::: aside
`distinct()` selects only unique rows from a data frame. Check out `?distinct` for more detail. 
:::

## Summary

This session you have:

1.  Learnt R basic syntax

2.  Learnt how to transform your data

3.  Written concise code that is easy to follow
