{
  "hash": "5c73a932697d6bddec3eb82692049614",
  "result": {
    "markdown": "---\ntitle: \"Introduction and Set Up\"\nformat: \n  revealjs:\n    slide-number: true\n    chalkboard: \n      buttons: false\n    preview-links: auto\n---\n\n\n## Welcome\n\n## Introductions\n\n-   Third year in the GVPT PhD program\n\n-   Australian\n\n-   Bachelor of Economics, Arts (Hon I) from the University of Sydney\n\n-   Helped to develop the Lowy Institute's [Asia Power Index](https://power.lowyinstitute.org/)\n\n-   Analyst with the Australian Department of Defence\n\n-   Worked on the Institute for Economics and Peace's [Global Peace Index](https://www.visionofhumanity.org/maps/#/) and [Global Terrorism Index](https://www.visionofhumanity.org/maps/global-terrorism-index/#/)\n\n-   Favourite Smithsonian: the zoo!\n\n## Learning objectives for today\n\n1.    Introduction to R and friends\n\n2.    Getting your computers set up\n\n3.    Plotting your data using R and `ggplot2`\n\n## Computational social scientists\n\n## Set up\n\n-   Homebrew (MacOS or Linux only)\n\n-   R and RStudio\n\n-   Git and GitHub\n\n## Homebrew: The Missing Package Manager for macOS and Linux\n\n![](img/homebrew.png){fig-align=\"center\"}\n\n1.    Go to https://brew.sh/\n\n2.    Follow instructions on the homepage\n\n## R and RStudio\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n### R\nR is a free and open-source programming language and software environment for statistical computing and graphics.\n:::\n\n::: {.column width=\"50%\"}\n### RStudio\nRStudio is an integrated development environment (IDE) for the R programming language.\n:::\n\n::::\n\n## A Tour of RStudio\n\n![Source: [R4DS](https://r4ds.had.co.nz/introduction.html#rstudio)](img/rstudio-console.png){fig-align=\"center\"}\n\n## Git and GitHub\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n### Git\nGit is a version control system used for tracking changes in software development projects.\n:::\n\n::: {.column width=\"50%\"}\n### GitHub\nGitHub is a web-based platform for version control and collaborative software development using Git.\n:::\n\n::::\n\n## BREAK\n\n## The Research Process\n\n![Source: [R4DS](https://r4ds.had.co.nz/explore-intro.html)](img/r4ds_process.png){fig-align=\"center\"}\n\n## R basics\n\nR code: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nFunctions: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n## R packages\n\nPackages are collections of R functions, data, and compiled code in a well-defined format\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install the relevant package(s)\ninstall.packages(\"tidyverse\")\n\n# Load the package in current session\nlibrary(tidyverse)\n```\n:::\n\n\n## Data visualisation\n\nFrom [R4DS - Data Visualization](https://r4ds.had.co.nz/data-visualisation.html):\n\n> Do cars with big engines use more fuel than cars with small engines?\n\n::: {.notes}\n\nLet’s use our first graph to answer a question: Do cars with big engines use more fuel than cars with small engines? You probably already have an answer, but try to make your answer precise. What does the relationship between engine size and fuel efficiency look like? Is it positive? Negative? Linear? Nonlinear?\n\n:::\n\n\n## Skipping to the end\n\n\n::: {.cell}\n\n:::\n\n\n\n## Load relevant packages and data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the relevant functions\nlibrary(tidyverse)\n\n# Load the data\nmpg\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|manufacturer |model | displ| year| cyl|\n|:------------|:-----|-----:|----:|---:|\n|audi         |a4    |   1.8| 1999|   4|\n|audi         |a4    |   1.8| 1999|   4|\n|audi         |a4    |   2.0| 2008|   4|\n|audi         |a4    |   2.0| 2008|   4|\n|audi         |a4    |   2.8| 1999|   6|\n|audi         |a4    |   2.8| 1999|   6|\n:::\n:::\n\n\n::: {.notes}\nYou only need to install a package once, but you need to reload it every time you start a new session.\n\nA data frame is a rectangular collection of variables (in the columns) and observations (in the rows). mpg contains observations collected by the US Environmental Protection Agency on 38 models of car.\n:::\n\n## Learning more about the data\n\nTo get help on any function or dataset use: `?function`\n\n\n::: {.cell}\n\n:::\n\n\n::: {.notes}\nAmong the variables in `mpg` are:\n\n1.    `displ`, a car’s engine size, in litres.\n\n2.    `hwy`, a car’s fuel efficiency on the highway, in miles per gallon (mpg). A car with a low fuel efficiency consumes more fuel than a car with a high fuel efficiency when they travel the same distance.\n:::\n\n## Plot your data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy))\n```\n\n::: {.cell-output-display}\n![](01-class_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n::: {.notes}\nThe plot shows a negative relationship between engine size (`displ`) and fuel efficiency (`hwy`). In other words, cars with big engines use more fuel. Does this confirm or refute your hypothesis about fuel efficiency and engine size?\n\nWith `ggplot2`, you begin a plot with the function `ggplot()`. `ggplot()` creates a coordinate system that you can add layers to. The first argument of `ggplot()` is the dataset to use in the graph. So `ggplot(data = mpg)` creates an empty graph, but it’s not very interesting so I’m not going to show it here.\n\nYou complete your graph by adding one or more layers to `ggplot()`. The function `geom_point()` adds a layer of points to your plot, which creates a scatterplot. `ggplot2` comes with many geom functions that each add a different type of layer to a plot. You’ll learn a whole bunch of them throughout this chapter.\n\nEach geom function in `ggplot2` takes a mapping argument. This defines how variables in your dataset are mapped to visual properties. The mapping argument is always paired with `aes()`, and the `x` and `y` arguments of `aes()` specify which variables to map to the `x` and `y` axes. `ggplot2` looks for the mapped variables in the data argument, in this case, `mpg`.\n:::\n\n## A general plotting template\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = <DATA>) + \n  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))\n```\n:::\n",
    "supporting": [
      "01-class_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}